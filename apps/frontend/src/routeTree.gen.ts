/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TermsOfServiceRouteImport } from './routes/terms-of-service'
import { Route as SignUpRouteImport } from './routes/sign-up'
import { Route as SignInRouteImport } from './routes/sign-in'
import { Route as RefundPolicyRouteImport } from './routes/refund-policy'
import { Route as PrivacyPolicyRouteImport } from './routes/privacy-policy'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProjectsIndexRouteImport } from './routes/projects/index'
import { Route as UserSettingsSubscriptionsRouteImport } from './routes/user-settings/subscriptions'
import { Route as UserSettingsGeneralRouteImport } from './routes/user-settings/general'
import { Route as UserSettingsDeleteAccountRouteImport } from './routes/user-settings/delete-account'
import { Route as TestingFeatureFlagsRouteImport } from './routes/testing/feature-flags'
import { Route as ProjectsProjectSlugSchemasRouteImport } from './routes/projects/$projectSlug/schemas'

const TermsOfServiceRoute = TermsOfServiceRouteImport.update({
  id: '/terms-of-service',
  path: '/terms-of-service',
  getParentRoute: () => rootRouteImport,
} as any)
const SignUpRoute = SignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const SignInRoute = SignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const RefundPolicyRoute = RefundPolicyRouteImport.update({
  id: '/refund-policy',
  path: '/refund-policy',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyPolicyRoute = PrivacyPolicyRouteImport.update({
  id: '/privacy-policy',
  path: '/privacy-policy',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsIndexRoute = ProjectsIndexRouteImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => rootRouteImport,
} as any)
const UserSettingsSubscriptionsRoute =
  UserSettingsSubscriptionsRouteImport.update({
    id: '/user-settings/subscriptions',
    path: '/user-settings/subscriptions',
    getParentRoute: () => rootRouteImport,
  } as any)
const UserSettingsGeneralRoute = UserSettingsGeneralRouteImport.update({
  id: '/user-settings/general',
  path: '/user-settings/general',
  getParentRoute: () => rootRouteImport,
} as any)
const UserSettingsDeleteAccountRoute =
  UserSettingsDeleteAccountRouteImport.update({
    id: '/user-settings/delete-account',
    path: '/user-settings/delete-account',
    getParentRoute: () => rootRouteImport,
  } as any)
const TestingFeatureFlagsRoute = TestingFeatureFlagsRouteImport.update({
  id: '/testing/feature-flags',
  path: '/testing/feature-flags',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsProjectSlugSchemasRoute =
  ProjectsProjectSlugSchemasRouteImport.update({
    id: '/projects/$projectSlug/schemas',
    path: '/projects/$projectSlug/schemas',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/refund-policy': typeof RefundPolicyRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/terms-of-service': typeof TermsOfServiceRoute
  '/testing/feature-flags': typeof TestingFeatureFlagsRoute
  '/user-settings/delete-account': typeof UserSettingsDeleteAccountRoute
  '/user-settings/general': typeof UserSettingsGeneralRoute
  '/user-settings/subscriptions': typeof UserSettingsSubscriptionsRoute
  '/projects': typeof ProjectsIndexRoute
  '/projects/$projectSlug/schemas': typeof ProjectsProjectSlugSchemasRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/refund-policy': typeof RefundPolicyRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/terms-of-service': typeof TermsOfServiceRoute
  '/testing/feature-flags': typeof TestingFeatureFlagsRoute
  '/user-settings/delete-account': typeof UserSettingsDeleteAccountRoute
  '/user-settings/general': typeof UserSettingsGeneralRoute
  '/user-settings/subscriptions': typeof UserSettingsSubscriptionsRoute
  '/projects': typeof ProjectsIndexRoute
  '/projects/$projectSlug/schemas': typeof ProjectsProjectSlugSchemasRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/refund-policy': typeof RefundPolicyRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/terms-of-service': typeof TermsOfServiceRoute
  '/testing/feature-flags': typeof TestingFeatureFlagsRoute
  '/user-settings/delete-account': typeof UserSettingsDeleteAccountRoute
  '/user-settings/general': typeof UserSettingsGeneralRoute
  '/user-settings/subscriptions': typeof UserSettingsSubscriptionsRoute
  '/projects/': typeof ProjectsIndexRoute
  '/projects/$projectSlug/schemas': typeof ProjectsProjectSlugSchemasRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/privacy-policy'
    | '/refund-policy'
    | '/sign-in'
    | '/sign-up'
    | '/terms-of-service'
    | '/testing/feature-flags'
    | '/user-settings/delete-account'
    | '/user-settings/general'
    | '/user-settings/subscriptions'
    | '/projects'
    | '/projects/$projectSlug/schemas'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/privacy-policy'
    | '/refund-policy'
    | '/sign-in'
    | '/sign-up'
    | '/terms-of-service'
    | '/testing/feature-flags'
    | '/user-settings/delete-account'
    | '/user-settings/general'
    | '/user-settings/subscriptions'
    | '/projects'
    | '/projects/$projectSlug/schemas'
  id:
    | '__root__'
    | '/'
    | '/privacy-policy'
    | '/refund-policy'
    | '/sign-in'
    | '/sign-up'
    | '/terms-of-service'
    | '/testing/feature-flags'
    | '/user-settings/delete-account'
    | '/user-settings/general'
    | '/user-settings/subscriptions'
    | '/projects/'
    | '/projects/$projectSlug/schemas'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PrivacyPolicyRoute: typeof PrivacyPolicyRoute
  RefundPolicyRoute: typeof RefundPolicyRoute
  SignInRoute: typeof SignInRoute
  SignUpRoute: typeof SignUpRoute
  TermsOfServiceRoute: typeof TermsOfServiceRoute
  TestingFeatureFlagsRoute: typeof TestingFeatureFlagsRoute
  UserSettingsDeleteAccountRoute: typeof UserSettingsDeleteAccountRoute
  UserSettingsGeneralRoute: typeof UserSettingsGeneralRoute
  UserSettingsSubscriptionsRoute: typeof UserSettingsSubscriptionsRoute
  ProjectsIndexRoute: typeof ProjectsIndexRoute
  ProjectsProjectSlugSchemasRoute: typeof ProjectsProjectSlugSchemasRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/terms-of-service': {
      id: '/terms-of-service'
      path: '/terms-of-service'
      fullPath: '/terms-of-service'
      preLoaderRoute: typeof TermsOfServiceRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-up': {
      id: '/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof SignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/refund-policy': {
      id: '/refund-policy'
      path: '/refund-policy'
      fullPath: '/refund-policy'
      preLoaderRoute: typeof RefundPolicyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy-policy': {
      id: '/privacy-policy'
      path: '/privacy-policy'
      fullPath: '/privacy-policy'
      preLoaderRoute: typeof PrivacyPolicyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/': {
      id: '/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/user-settings/subscriptions': {
      id: '/user-settings/subscriptions'
      path: '/user-settings/subscriptions'
      fullPath: '/user-settings/subscriptions'
      preLoaderRoute: typeof UserSettingsSubscriptionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/user-settings/general': {
      id: '/user-settings/general'
      path: '/user-settings/general'
      fullPath: '/user-settings/general'
      preLoaderRoute: typeof UserSettingsGeneralRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/user-settings/delete-account': {
      id: '/user-settings/delete-account'
      path: '/user-settings/delete-account'
      fullPath: '/user-settings/delete-account'
      preLoaderRoute: typeof UserSettingsDeleteAccountRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/testing/feature-flags': {
      id: '/testing/feature-flags'
      path: '/testing/feature-flags'
      fullPath: '/testing/feature-flags'
      preLoaderRoute: typeof TestingFeatureFlagsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/$projectSlug/schemas': {
      id: '/projects/$projectSlug/schemas'
      path: '/projects/$projectSlug/schemas'
      fullPath: '/projects/$projectSlug/schemas'
      preLoaderRoute: typeof ProjectsProjectSlugSchemasRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PrivacyPolicyRoute: PrivacyPolicyRoute,
  RefundPolicyRoute: RefundPolicyRoute,
  SignInRoute: SignInRoute,
  SignUpRoute: SignUpRoute,
  TermsOfServiceRoute: TermsOfServiceRoute,
  TestingFeatureFlagsRoute: TestingFeatureFlagsRoute,
  UserSettingsDeleteAccountRoute: UserSettingsDeleteAccountRoute,
  UserSettingsGeneralRoute: UserSettingsGeneralRoute,
  UserSettingsSubscriptionsRoute: UserSettingsSubscriptionsRoute,
  ProjectsIndexRoute: ProjectsIndexRoute,
  ProjectsProjectSlugSchemasRoute: ProjectsProjectSlugSchemasRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
